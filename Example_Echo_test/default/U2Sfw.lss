
U2Sfw.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .noinit       0000000e  00800100  00800100  00000370  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000012e  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000422  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000215  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000038e  00000000  00000000  00000b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000e0  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001bf  00000000  00000000  00000f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000bd  00000000  00000000  00001143  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   8:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
   c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  10:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  14:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  18:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  1c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  20:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  24:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  28:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  2c:	0c 94 35 01 	jmp	0x26a	; 0x26a <__vector_11>
  30:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_12>
  34:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  38:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  3c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  40:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  44:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  48:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  4c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  50:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  54:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  58:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  5c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  60:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  64:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  68:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  6c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  70:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  74:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  78:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  7c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  80:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  84:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  88:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  8c:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  90:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>
  94:	0c 94 56 00 	jmp	0xac	; 0xac <__bad_interrupt>

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d4 e0       	ldi	r29, 0x04	; 4
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61
  a4:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  a8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <_exit>

000000ac <__bad_interrupt>:
  ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b0 <main>:
#include <util/delay.h>
#include "usb_lib.h"


int main(int i, char **p) // ignore p
{
  b0:	1f 93       	push	r17
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
	u8 u;
	i &= 0x0F; // the select value from the bootloader
  b6:	ec 01       	movw	r28, r24
  b8:	cf 70       	andi	r28, 0x0F	; 15
  ba:	d0 70       	andi	r29, 0x00	; 0

	usb_init();
  bc:	0e 94 91 00 	call	0x122	; 0x122 <usb_init>
  c0:	08 c0       	rjmp	.+16     	; 0xd2 <main+0x22>

	while(1) {
		while(!usb_rxready()) {
			if(select_pressed()) {
  c2:	34 99       	sbic	0x06, 4	; 6
  c4:	06 c0       	rjmp	.+12     	; 0xd2 <main+0x22>
				led_on();
  c6:	42 98       	cbi	0x08, 2	; 8
				while(select_pressed());
  c8:	34 9b       	sbis	0x06, 4	; 6
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x18>
				select_mode(0x81); // goto the bootloader
  cc:	81 e8       	ldi	r24, 0x81	; 129
  ce:	0e 94 85 00 	call	0x10a	; 0x10a <select_mode>
	i &= 0x0F; // the select value from the bootloader

	usb_init();

	while(1) {
		while(!usb_rxready()) {
  d2:	0e 94 a3 00 	call	0x146	; 0x146 <usb_rxready>
  d6:	88 23       	and	r24, r24
  d8:	a1 f3       	breq	.-24     	; 0xc2 <main+0x12>
				while(select_pressed());
				select_mode(0x81); // goto the bootloader
			}
		}

		u = usb_getc();
  da:	0e 94 c2 00 	call	0x184	; 0x184 <usb_getc>
  de:	18 2f       	mov	r17, r24
		usb_putc_nf(u+i);
  e0:	8c 0f       	add	r24, r28
  e2:	0e 94 0a 01 	call	0x214	; 0x214 <usb_putc_nf>
		usb_putc_nf('\r');
  e6:	8d e0       	ldi	r24, 0x0D	; 13
  e8:	0e 94 0a 01 	call	0x214	; 0x214 <usb_putc_nf>
		usb_putc('\n');
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	0e 94 27 01 	call	0x24e	; 0x24e <usb_putc>
		if(u == 'q') {
  f2:	11 37       	cpi	r17, 0x71	; 113
  f4:	71 f7       	brne	.-36     	; 0xd2 <main+0x22>
  f6:	ea cf       	rjmp	.-44     	; 0xcc <main+0x1c>

000000f8 <set_clock>:
//---------------------------------------------------------

void set_clock(u8 u)
{
	//WARNING turning off optimization will break this...
	u8 t = SREG;
  f8:	2f b7       	in	r18, 0x3f	; 63
	cli();
  fa:	f8 94       	cli
	CLKPR = (1<<CLKPCE);
  fc:	e1 e6       	ldi	r30, 0x61	; 97
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	90 e8       	ldi	r25, 0x80	; 128
 102:	90 83       	st	Z, r25
	CLKPR = u;
 104:	80 83       	st	Z, r24
	SREG = t;
 106:	2f bf       	out	0x3f, r18	; 63
}
 108:	08 95       	ret

0000010a <select_mode>:
void select_mode(u8 u)
{
	// Prevent USB reinit
	u |= 0x50; //== r24

	Usb_select_endpoint(CONTROL_EP);
 10a:	10 92 e9 00 	sts	0x00E9, r1
	UDIEN = 0;
 10e:	10 92 e2 00 	sts	0x00E2, r1
	UEIENX = 0;
 112:	10 92 f0 00 	sts	0x00F0, r1

 	asm("mov	r24,%0" ::"r"(u));
 116:	80 65       	ori	r24, 0x50	; 80
 118:	88 2f       	mov	r24, r24
	asm("ldi	r30,0x53" ::);
 11a:	e3 e5       	ldi	r30, 0x53	; 83
	asm("ldi	r31,0xCA" ::);
 11c:	fa ec       	ldi	r31, 0xCA	; 202
	BL_CALL(0x7FE); //BLStart 4KB
 11e:	0e 94 00 3c 	call	0x7800	; 0x7800 <__stack+0x7301>

00000122 <usb_init>:
//---------------------------------------------------------

void usb_init()
{
#ifdef USE_INTERRUPT
	sei();
 122:	78 94       	sei
	Usb_enable_reset_interrupt();
 124:	80 91 e2 00 	lds	r24, 0x00E2
 128:	88 60       	ori	r24, 0x08	; 8
 12a:	80 93 e2 00 	sts	0x00E2, r24

	Usb_select_endpoint(CONTROL_EP);
 12e:	10 92 e9 00 	sts	0x00E9, r1
	do{
		UEIENX |= (1<<RXSTPE);
 132:	80 91 f0 00 	lds	r24, 0x00F0
 136:	88 60       	ori	r24, 0x08	; 8
 138:	80 93 f0 00 	sts	0x00F0, r24
	}while(!(UEIENX & (1<<RXSTPE))); //just make sure...
 13c:	80 91 f0 00 	lds	r24, 0x00F0
 140:	83 ff       	sbrs	r24, 3
 142:	f7 cf       	rjmp	.-18     	; 0x132 <usb_init+0x10>
#endif
}
 144:	08 95       	ret

00000146 <usb_rxready>:
//---------------------------------------------------------

u8 usb_rxready(void)
{
	usb_task();
	if(!Is_device_enumerated()) {
 146:	80 91 00 01 	lds	r24, 0x0100
 14a:	88 23       	and	r24, r24
 14c:	c9 f0       	breq	.+50     	; 0x180 <usb_rxready+0x3a>
		return 0;
	}

	Usb_select_endpoint(RX_EP);
 14e:	84 e0       	ldi	r24, 0x04	; 4
 150:	80 93 e9 00 	sts	0x00E9, r24

	if(Is_usb_receive_out()) {
 154:	80 91 e8 00 	lds	r24, 0x00E8
 158:	82 ff       	sbrs	r24, 2
 15a:	12 c0       	rjmp	.+36     	; 0x180 <usb_rxready+0x3a>
		if(Is_usb_read_enabled()) {
 15c:	80 91 e8 00 	lds	r24, 0x00E8
 160:	85 ff       	sbrs	r24, 5
 162:	02 c0       	rjmp	.+4      	; 0x168 <usb_rxready+0x22>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	08 95       	ret
			return 1;
		}else{
			Usb_ack_receive_out();
 168:	80 91 e8 00 	lds	r24, 0x00E8
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	80 93 e8 00 	sts	0x00E8, r24
 172:	80 91 e8 00 	lds	r24, 0x00E8
 176:	8f 77       	andi	r24, 0x7F	; 127
 178:	80 93 e8 00 	sts	0x00E8, r24
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	08 95       	ret
 180:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;
}
 182:	08 95       	ret

00000184 <usb_getc>:

u8 usb_getc(void)
{
	register u8 u;
	while(!Is_device_enumerated()) {
 184:	80 91 00 01 	lds	r24, 0x0100
 188:	88 23       	and	r24, r24
 18a:	e1 f3       	breq	.-8      	; 0x184 <usb_getc>
		usb_task();
	}
next:
	do {
		usb_task();
		Usb_select_endpoint(RX_EP); //yes this must be done
 18c:	94 e0       	ldi	r25, 0x04	; 4
 18e:	90 93 e9 00 	sts	0x00E9, r25
	}while(!Is_usb_receive_out());
 192:	80 91 e8 00 	lds	r24, 0x00E8
 196:	82 ff       	sbrs	r24, 2
 198:	fa cf       	rjmp	.-12     	; 0x18e <usb_getc+0xa>

	if(Is_usb_read_enabled()) {
 19a:	80 91 e8 00 	lds	r24, 0x00E8
 19e:	85 ff       	sbrs	r24, 5
 1a0:	12 c0       	rjmp	.+36     	; 0x1c6 <usb_getc+0x42>
		u = Usb_read_byte();
 1a2:	90 91 f1 00 	lds	r25, 0x00F1
		if(!Is_usb_read_enabled()) {
 1a6:	80 91 e8 00 	lds	r24, 0x00E8
 1aa:	85 fd       	sbrc	r24, 5
 1ac:	0a c0       	rjmp	.+20     	; 0x1c2 <usb_getc+0x3e>
			Usb_ack_receive_out();
 1ae:	80 91 e8 00 	lds	r24, 0x00E8
 1b2:	8b 7f       	andi	r24, 0xFB	; 251
 1b4:	80 93 e8 00 	sts	0x00E8, r24
 1b8:	80 91 e8 00 	lds	r24, 0x00E8
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	80 93 e8 00 	sts	0x00E8, r24
	}else{
		//nothing more to read so acknowledge the packet
		Usb_ack_receive_out();
		goto next;
	}
}
 1c2:	89 2f       	mov	r24, r25
 1c4:	08 95       	ret
			Usb_ack_receive_out();
		}
		return u;
	}else{
		//nothing more to read so acknowledge the packet
		Usb_ack_receive_out();
 1c6:	80 91 e8 00 	lds	r24, 0x00E8
 1ca:	8b 7f       	andi	r24, 0xFB	; 251
 1cc:	80 93 e8 00 	sts	0x00E8, r24
 1d0:	80 91 e8 00 	lds	r24, 0x00E8
 1d4:	8f 77       	andi	r24, 0x7F	; 127
 1d6:	80 93 e8 00 	sts	0x00E8, r24
 1da:	d9 cf       	rjmp	.-78     	; 0x18e <usb_getc+0xa>

000001dc <usb_txready>:

u8 usb_txready(void)
{
	usb_task();

	Usb_select_endpoint(TX_EP);
 1dc:	83 e0       	ldi	r24, 0x03	; 3
 1de:	80 93 e9 00 	sts	0x00E9, r24
	return Is_device_enumerated() && Is_usb_write_enabled();
 1e2:	80 91 00 01 	lds	r24, 0x0100
 1e6:	88 23       	and	r24, r24
 1e8:	19 f4       	brne	.+6      	; 0x1f0 <usb_txready+0x14>
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	80 91 e8 00 	lds	r24, 0x00E8
 1f4:	82 95       	swap	r24
 1f6:	86 95       	lsr	r24
 1f8:	81 70       	andi	r24, 0x01	; 1
}
 1fa:	08 95       	ret

000001fc <usb_flush>:
	usb_flush();
}

void usb_flush()
{
	Usb_select_endpoint(TX_EP);
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	80 93 e9 00 	sts	0x00E9, r24
	Usb_ack_in_ready();
 202:	e8 ee       	ldi	r30, 0xE8	; 232
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	80 83       	st	Z, r24
 20c:	80 81       	ld	r24, Z
 20e:	8f 77       	andi	r24, 0x7F	; 127
 210:	80 83       	st	Z, r24
}
 212:	08 95       	ret

00000214 <usb_putc_nf>:

// flush only when the buffer is full (32bytes)
void usb_putc_nf(u8 c)
{
 214:	98 2f       	mov	r25, r24
	do{
		usb_task();
	}while(!Is_device_enumerated());
 216:	80 91 00 01 	lds	r24, 0x0100
 21a:	88 23       	and	r24, r24
 21c:	e1 f3       	breq	.-8      	; 0x216 <usb_putc_nf+0x2>

	Usb_select_endpoint(TX_EP);
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	80 93 e9 00 	sts	0x00E9, r24

	// Wait Endpoint ready
	while(!Is_usb_write_enabled());
 224:	80 91 e8 00 	lds	r24, 0x00E8
 228:	85 ff       	sbrs	r24, 5
 22a:	fc cf       	rjmp	.-8      	; 0x224 <usb_putc_nf+0x10>
	Usb_write_byte(c);
 22c:	90 93 f1 00 	sts	0x00F1, r25

	// buffer full, so flush
	// there is double buffering so this would rarely be used ?
	if(!Is_usb_write_enabled()) {
 230:	80 91 e8 00 	lds	r24, 0x00E8
 234:	85 fd       	sbrc	r24, 5
 236:	0a c0       	rjmp	.+20     	; 0x24c <usb_putc_nf+0x38>
		Usb_ack_in_ready();
 238:	80 91 e8 00 	lds	r24, 0x00E8
 23c:	8e 7f       	andi	r24, 0xFE	; 254
 23e:	80 93 e8 00 	sts	0x00E8, r24
 242:	80 91 e8 00 	lds	r24, 0x00E8
 246:	8f 77       	andi	r24, 0x7F	; 127
 248:	80 93 e8 00 	sts	0x00E8, r24
 24c:	08 95       	ret

0000024e <usb_putc>:
	return Is_device_enumerated() && Is_usb_write_enabled();
}

void usb_putc(u8 c)
{
	usb_putc_nf(c);
 24e:	0e 94 0a 01 	call	0x214	; 0x214 <usb_putc_nf>
	usb_flush();
}

void usb_flush()
{
	Usb_select_endpoint(TX_EP);
 252:	83 e0       	ldi	r24, 0x03	; 3
 254:	80 93 e9 00 	sts	0x00E9, r24
	Usb_ack_in_ready();
 258:	e8 ee       	ldi	r30, 0xE8	; 232
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	8e 7f       	andi	r24, 0xFE	; 254
 260:	80 83       	st	Z, r24
 262:	80 81       	ld	r24, Z
 264:	8f 77       	andi	r24, 0x7F	; 127
 266:	80 83       	st	Z, r24

void usb_putc(u8 c)
{
	usb_putc_nf(c);
	usb_flush();
}
 268:	08 95       	ret

0000026a <__vector_11>:
//---------------------------------------------------------

#ifdef USE_INTERRUPT

ISR(USB_GEN_vect)
{
 26a:	1f 92       	push	r1
 26c:	0f 92       	push	r0
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	0f 92       	push	r0
 272:	11 24       	eor	r1, r1
 274:	2f 92       	push	r2
 276:	0f 93       	push	r16
 278:	8f 93       	push	r24
 27a:	9f 93       	push	r25
	u8 eunum = UENUM;
 27c:	90 91 e9 00 	lds	r25, 0x00E9
	if(Is_usb_reset()) {
 280:	80 91 e1 00 	lds	r24, 0x00E1
 284:	83 ff       	sbrs	r24, 3
 286:	03 c0       	rjmp	.+6      	; 0x28e <__vector_11+0x24>
		asm("clr r2" :::"r2");//r2 MUST be set to 0
 288:	22 24       	eor	r2, r2
		BL_CALL(2); //usb_reset 0x3FFE for 32U2
 28a:	0e 94 fe 3f 	call	0x7ffc	; 0x7ffc <__stack+0x7afd>
	}

	Usb_select_endpoint(CONTROL_EP);
 28e:	10 92 e9 00 	sts	0x00E9, r1
	do{
		UEIENX |= (1<<RXSTPE); //IMPORTANT -- This MUST be done.
 292:	80 91 f0 00 	lds	r24, 0x00F0
 296:	88 60       	ori	r24, 0x08	; 8
 298:	80 93 f0 00 	sts	0x00F0, r24
	}while(!(UEIENX & (1<<RXSTPE)));
 29c:	80 91 f0 00 	lds	r24, 0x00F0
 2a0:	83 ff       	sbrs	r24, 3
 2a2:	f7 cf       	rjmp	.-18     	; 0x292 <__vector_11+0x28>

	UENUM = eunum;
 2a4:	90 93 e9 00 	sts	0x00E9, r25
}
 2a8:	9f 91       	pop	r25
 2aa:	8f 91       	pop	r24
 2ac:	0f 91       	pop	r16
 2ae:	2f 90       	pop	r2
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_12>:

ISR(USB_COM_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 92       	push	r2
 2c6:	0f 93       	push	r16
 2c8:	8f 93       	push	r24
 2ca:	9f 93       	push	r25
	u8 eunum = UENUM;
 2cc:	90 91 e9 00 	lds	r25, 0x00E9
	Usb_select_endpoint(CONTROL_EP);
 2d0:	10 92 e9 00 	sts	0x00E9, r1
	if(Is_usb_receive_setup()) {
 2d4:	80 91 e8 00 	lds	r24, 0x00E8
 2d8:	83 ff       	sbrs	r24, 3
 2da:	03 c0       	rjmp	.+6      	; 0x2e2 <__vector_12+0x28>
		asm("clr r2" :::"r2");//r2 MUST be set to 0
 2dc:	22 24       	eor	r2, r2
		BL_CALL(4); //usb_process_request 0x3FFD for 32U2
 2de:	0e 94 fd 3f 	call	0x7ffa	; 0x7ffa <__stack+0x7afb>
	}
	UENUM = eunum;
 2e2:	90 93 e9 00 	sts	0x00E9, r25
}
 2e6:	9f 91       	pop	r25
 2e8:	8f 91       	pop	r24
 2ea:	0f 91       	pop	r16
 2ec:	2f 90       	pop	r2
 2ee:	0f 90       	pop	r0
 2f0:	0f be       	out	0x3f, r0	; 63
 2f2:	0f 90       	pop	r0
 2f4:	1f 90       	pop	r1
 2f6:	18 95       	reti

000002f8 <_exit>:
 2f8:	f8 94       	cli

000002fa <__stop_program>:
 2fa:	ff cf       	rjmp	.-2      	; 0x2fa <__stop_program>
